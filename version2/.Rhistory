shiny::runApp()
runApp()
rv$res
rv$res
saved$mods
input$saved_mods
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
opt_predictor
temp_chosen_outcome
temp$chosen_outcome
runApp()
temp$chosen_outcome
runApp()
runApp()
runApp()
runApp()
temp$chosen_outcome
runApp()
temp
temp[["res"]]
temp[["chosen_outcome"]]
runApp()
runApp()
res
mod
mod[[1]] %in% unlist(lapply(res, function(x) x[[1]]))
is.null(res
)
mod[[1]] %in% unlist(lapply(res, function(x) x[[1]]))
is.null(res)
res
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$predictor_set
length(input$predictor_set) == 0
is.null(temp$chosen_var)
temp$chosen_var
runApp()
runApp()
rv
rv$opt_outcome
rv$res
temp$chosen_outcome
temp$chosen_outcome
runApp()
temp$chosen_outcome
opt_predictor
opt_predictors
runApp()
temp$chosen_outcome
temp$chosen_outcome
runApp()
temp$chosen_outcome
runApp()
temp$chosen_outcome
temp$chosen_outcome
temp$chosen_outcome
runApp()
runApp()
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp()
runApp()
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp('~/Documents/Courses/2nd_year/R Shiny/Assignment/Assignment2/reproducible_ex')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
chosen_mod()
input$to
length(input$to)
lapply(chosen_mod(), function(x) x[[2]]
)
chosen_mod()
runApp()
rv$res
lapply(rv$res, function(x) x[[1]] %in% input$to)
unlist(lapply(rv$res, function(x) x[[1]] %in% input$to))
rv$res[[unlist(lapply(rv$res, function(x) x[[1]] %in% input$to))]]
rv$res[unlist(lapply(rv$res, function(x) x[[1]] %in% input$to))]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x[[3]]
cv.glm(data = dat, glmfit = x[[3]])$delta[2]
x[[3]]
cv.glm(x[[3]])
cv.glm(glmfit = x[[3]])
cv.glm(data = rv$dat, glmfit = x[[3]])
cv.glm(rv$data, x[[3]], K=nrow(rv$data))
x[[3]]
x[[1]]
cv.glm(data = dat,
glmfit = glm(eval(parse(text=x[[1]])), dat))
cv.glm(data = dat,
glmfit = glm(eval(parse(text=x[[1]])), dat))$delta[2]}
cv.glm(data = dat,
glmfit = glm(eval(parse(text=x[[1]])), dat))$delta[2]
cv.glm(data = dat,
glmfit = glm(eval(parse(text=x[[1]])), data =dat))$delta[2]
runApp()
runApp()
runApp()
runApp()
paste0("Model ", 1:length(chosen))
paste0("Model ", 1:length(chosen), ": ")
paste0("Model ", 1:length(chosen), ": ", unlist(lapply(chosen_mod, function(x) x[[1]])))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$start_compare
length(chosen)
input$start_compare!=0 & length(chosen)<=1
input$start_compare
length(chosen)
input$start_compare!=0 & length(chosen)<=1
input$start_compare!=0 & length(chosen)<=1
input$start_compare
length(chosen)
chosen
input$start_compare!=0 & length(chosen)<=1
input$start_compare
input$start_compare
runApp()
runApp()
unlist(lapply(chosen_mod, function(x) min(x[[2]])))
unlist(lapply(chosen_mod, function(x, y){x[[2]] == min(y)}, y = unlist(chosen_mod[2]))))
unlist(lapply(chosen_mod, function(x, y){x[[2]] == min(y)}, y = unlist(chosen_mod[2])))
unlist(lapply(chosen_mod, function(x, y){x[[2]] == min(y)}, y = unlist(chosen_mod[[2]])))
chosen_mod[[2]]
chosen_mod[2]
chosen_mod[[]][[2]]
chosen_mod[[2]]
lapply(chosen_mod, function(x) x[[2]])
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x) x[[2]])))
))]][[1]]
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x) x[[2]]))))
]][[1]]
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x) x[[2]])))))
]][[1]]
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x){x[[2]]})))))
]][[1]]
chosen_mod[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x){x[[2]]})))))
][[1]]
unlist(lapply(chosen_mod, functon(x){x[[2]]}))
unlist(lapply(chosen_mod, functon(x){x[[2]]}))
unlist(lapply(chosen_mod, functon(z){z[[2]]}))
lapply(chosen_mod, function(x) x[[2]])
unlist(lapply(chosen_mod, function(x) x[[2]]))
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, functon(x) x[[2]]))))
]][[1]]
)
unlist(lapply(chosen_mod, functon(x) x[[2]]))
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, function(x) x[[2]]))))
]][[1]]
unlist(lapply(chosen_mod, function(x) x[[2]]))
chosen_mod[[which(unlist(lapply(chosen_mod, function(x,y){
x[[2]]==min(y)
}, y = unlist(lapply(chosen_mod, function(x) x[[2]])))))
]][[1]]
runApp()
runApp()
runApp()
length(chosen)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
20*9/5 + 32
